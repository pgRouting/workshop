# 
msgid ""
msgstr ""
"Project-Id-Version: Workshop - FOSS4G routing with pgRouting 2013\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-10-07 10:18\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../chapters/shortest_path.rst:13
msgid "pgRouting Algorithms"
msgstr ""

#: ../../chapters/shortest_path.rst:15
msgid ""
"pgRouting was first called *pgDijkstra*, because it implemented only "
"shortest path search with *Dijkstra* algorithm. Later other functions were "
"added and the library was renamed."
msgstr ""

#: ../../chapters/shortest_path.rst:21
msgid ""
"This chapter will explain selected pgRouting algorithms and which attributes"
" are required."
msgstr ""

#: ../../chapters/shortest_path.rst:26
msgid ""
"If you run :doc:`osm2pgrouting <osm2pgrouting>` tool to import "
"*OpenStreetMap* data, the ``ways`` table contains all attributes already to "
"run all shortest path functions. The ``ways`` table of the ``pgrouting-"
"workshop`` database of the :doc:`previous chapter <topology>` is missing "
"several attributes instead, which are listed as **Prerequisites** in this "
"chapter."
msgstr ""

#: ../../chapters/shortest_path.rst:32
msgid "Shortest Path Dijkstra"
msgstr ""

#: ../../chapters/shortest_path.rst:34
msgid ""
"Dijkstra algorithm was the first algorithm implemented in pgRouting. It "
"doesn't require other attributes than ``source`` and ``target`` ID, ``id`` "
"attribute and ``cost``. It can distinguish between `directed "
"<http://en.wikipedia.org/wiki/Directed_graph>`_ and undirected graphs. You "
"can specify if your network has ``reverse cost`` or not."
msgstr ""

#: ../../chapters/shortest_path.rst:37 ../../chapters/shortest_path.rst:131
#: ../../chapters/shortest_path.rst:242
msgid "Prerequisites"
msgstr ""

#: ../../chapters/shortest_path.rst:38
msgid ""
"To be able to use ``reverse cost`` you need to add an additional cost "
"column. We can set reverse cost as length."
msgstr ""

#: ../../chapters/shortest_path.rst:46 ../../chapters/shortest_path.rst:157
#: ../../chapters/shortest_path.rst:247
msgid "Description"
msgstr ""

#: ../../chapters/shortest_path.rst:47 ../../chapters/shortest_path.rst:160
msgid ""
"Returns a set of ``pgr_costResult`` (seq, id1, id2, cost) rows, that make up"
" a path."
msgstr ""

#: ../../chapters/shortest_path.rst:55 ../../chapters/shortest_path.rst:168
#: ../../chapters/shortest_path.rst:263
msgid "Parameters"
msgstr ""

#: ../../chapters/shortest_path.rst:56 ../../chapters/shortest_path.rst:169
#: ../../chapters/shortest_path.rst:264
msgid ""
"a SQL query, which should return a set of rows with the following columns:"
msgstr ""

#: ../../chapters/shortest_path.rst:63 ../../chapters/shortest_path.rst:176
#: ../../chapters/shortest_path.rst:271
msgid "``int4`` identifier of the edge"
msgstr ""

#: ../../chapters/shortest_path.rst:64 ../../chapters/shortest_path.rst:177
#: ../../chapters/shortest_path.rst:272
msgid "``int4`` identifier of the source vertex"
msgstr ""

#: ../../chapters/shortest_path.rst:65 ../../chapters/shortest_path.rst:178
#: ../../chapters/shortest_path.rst:273
msgid "``int4`` identifier of the target vertex"
msgstr ""

#: ../../chapters/shortest_path.rst:66 ../../chapters/shortest_path.rst:179
#: ../../chapters/shortest_path.rst:274
msgid ""
"``float8`` value, of the edge traversal cost. A negative cost will prevent "
"the edge from being inserted in the graph."
msgstr ""

#: ../../chapters/shortest_path.rst:67 ../../chapters/shortest_path.rst:184
#: ../../chapters/shortest_path.rst:275
msgid ""
"(optional) the cost for the reverse traversal of the edge. This is only used"
" when the ``directed`` and ``has_rcost`` parameters are ``true`` (see the "
"above remark about negative costs)."
msgstr ""

#: ../../chapters/shortest_path.rst:69 ../../chapters/shortest_path.rst:186
#: ../../chapters/shortest_path.rst:277
msgid "``int4`` id of the start point"
msgstr ""

#: ../../chapters/shortest_path.rst:70 ../../chapters/shortest_path.rst:187
msgid "``int4`` id of the end point"
msgstr ""

#: ../../chapters/shortest_path.rst:71 ../../chapters/shortest_path.rst:188
#: ../../chapters/shortest_path.rst:279
msgid "``true`` if the graph is directed"
msgstr ""

#: ../../chapters/shortest_path.rst:72 ../../chapters/shortest_path.rst:189
#: ../../chapters/shortest_path.rst:280
msgid ""
"if ``true``, the ``reverse_cost`` column of the SQL generated set of rows "
"will be used for the cost of the traversal of the edge in the opposite "
"direction."
msgstr ""

#: ../../chapters/shortest_path.rst:74 ../../chapters/shortest_path.rst:191
msgid "Returns set of ``pgr_costResult``:"
msgstr ""

#: ../../chapters/shortest_path.rst:76 ../../chapters/shortest_path.rst:193
#: ../../chapters/shortest_path.rst:285 ../../chapters/shortest_path.rst:293
msgid "row sequence"
msgstr ""

#: ../../chapters/shortest_path.rst:77 ../../chapters/shortest_path.rst:194
msgid "node ID"
msgstr ""

#: ../../chapters/shortest_path.rst:78 ../../chapters/shortest_path.rst:195
msgid "edge ID (``-1`` for the last row)"
msgstr ""

#: ../../chapters/shortest_path.rst:79 ../../chapters/shortest_path.rst:196
msgid "cost to traverse from ``id1`` using ``id2``"
msgstr ""

#: ../../chapters/shortest_path.rst:84
msgid ""
"Many pgRouting functions have ``sql::text`` as one of their arguments. While"
" this may look confusing at first, it makes the functions very flexible as "
"the user can pass any ``SELECT`` statement as function argument as long as "
"the returned result contains the required number of attributes and the "
"correct attribute names."
msgstr ""

#: ../../chapters/shortest_path.rst:85
msgid "Dijkstra algorithm does not require the network geometry."
msgstr ""

#: ../../chapters/shortest_path.rst:86
msgid ""
"The function does not return a geometry, but only an ordered list of nodes."
msgstr ""

#: ../../chapters/shortest_path.rst:89 ../../chapters/shortest_path.rst:200
msgid "Example query"
msgstr ""

#: ../../chapters/shortest_path.rst:90
msgid ""
"``pgr_costResult`` is a common result type used by several pgRouting "
"functions. In the case of ``pgr_dijkstra`` the first column is a sequential "
"ID, followed by node ID, edge ID and cost to pass this edge."
msgstr ""

#: ../../chapters/shortest_path.rst:104 ../../chapters/shortest_path.rst:214
#: ../../chapters/shortest_path.rst:313 ../../chapters/shortest_path.rst:338
msgid "Query result"
msgstr ""

#: ../../chapters/shortest_path.rst:120
msgid ""
"With more complex SQL statements, using JOINs for example, the result may be"
" in a wrong order. In that case ``ORDER BY seq`` will ensure that the path "
"is in the right order again."
msgstr ""

#: ../../chapters/shortest_path.rst:121
msgid ""
"The returned cost attribute represents the cost specified in the "
"``sql::text`` argument. In this example cost is ``length`` in unit "
"\"kilometers\". Cost may be time, distance or any combination of both or any"
" other attributes or a custom formula."
msgstr ""

#: ../../chapters/shortest_path.rst:126
msgid "Shortest Path A*"
msgstr ""

#: ../../chapters/shortest_path.rst:128
msgid ""
"A-Star algorithm is another well-known routing algorithm. It adds "
"geographical information to source and target of each network link. This "
"enables the routing query to prefer links which are closer to the target of "
"the shortest path search."
msgstr ""

#: ../../chapters/shortest_path.rst:132
msgid ""
"For A-Star you need to prepare your network table and add latitute/longitude"
" columns (``x1``, ``y1`` and ``x2``, ``y2``) and calculate their values."
msgstr ""

#: ../../chapters/shortest_path.rst:149
msgid ""
"A bug in a previous version of PostGIS didn't allow the use of "
"``ST_startpoint`` or ``ST_endpoint``."
msgstr ""

#: ../../chapters/shortest_path.rst:150
msgid ""
"From PostGIS 2.x ``ST_startpoint`` and ``ST_endpoint`` are only valid for "
"``LINESTRING`` geometry type and will fail with ``MULTILINESTING``."
msgstr ""

#: ../../chapters/shortest_path.rst:152
msgid ""
"Therefor a slightly more difficult looking query is used. If the network "
"data really contains multi-geomtery linestrings the query might give the "
"wrong start and end point. But in general data has been imported as "
"``MULTILINESTING`` even if it only contains ``LINESTRING`` geometries."
msgstr ""

#: ../../chapters/shortest_path.rst:158
msgid ""
"Shortest Path A-Star function is very similar to the Dijkstra function, "
"though it prefers links that are close to the target of the search. The "
"heuristics of this search are predefined, so you need to recompile pgRouting"
" if you want to make changes to the heuristic function itself."
msgstr ""

#: ../../chapters/shortest_path.rst:180
msgid "``x`` coordinate of the start point of the edge"
msgstr ""

#: ../../chapters/shortest_path.rst:181
msgid "``y`` coordinate of the start point of the edge"
msgstr ""

#: ../../chapters/shortest_path.rst:182
msgid "``x`` coordinate of the end point of the edge"
msgstr ""

#: ../../chapters/shortest_path.rst:183
msgid "``y`` coordinate of the end point of the edge"
msgstr ""

#: ../../chapters/shortest_path.rst:230
msgid ""
"The result of Dijkstra and A-Star are the same, which should be the case."
msgstr ""

#: ../../chapters/shortest_path.rst:231
msgid ""
"A-Star is supposed to be faster than Dijkstra algorithm as the network size "
"is getting larger. But in case of pgRouting the algorithm speed advantage "
"does not matter really compared the time required to select the network data"
" and build the graph."
msgstr ""

#: ../../chapters/shortest_path.rst:237
msgid "Multiple Shortest Paths with kDijkstra"
msgstr ""

#: ../../chapters/shortest_path.rst:239
msgid ""
"The kDijkstra functions are very similar to the Dijkstra function but they "
"allow to set multiple destinations with a single function call."
msgstr ""

#: ../../chapters/shortest_path.rst:243
msgid "kDijkstra doesn't require additional attributes to Dijkstra algorithm."
msgstr ""

#: ../../chapters/shortest_path.rst:248
msgid ""
"If the main goal is to calculate the total cost, for example to calculate "
"multiple routes for a distance matrix, then ``pgr_kdijkstraCost`` returns a "
"more compact result. In case the paths are important ``pgr_kdijkstraPath`` "
"function returns a result similar to A* or Dijkstra for each destination."
msgstr ""

#: ../../chapters/shortest_path.rst:251
msgid ""
"Both functions return a set of ``pgr_costResult`` (seq, id1, id2, cost) "
"rows, that summarize the path cost or return the paths."
msgstr ""

#: ../../chapters/shortest_path.rst:278
msgid "``int4[]`` an array of ids of the end points"
msgstr ""

#: ../../chapters/shortest_path.rst:283
msgid "``pgr_kdijkstraCost`` returns set of ``pgr_costResult``:"
msgstr ""

#: ../../chapters/shortest_path.rst:286
msgid ""
"path vertex source id (this will always be source start point in the query)."
msgstr ""

#: ../../chapters/shortest_path.rst:287
msgid "path vertex target id"
msgstr ""

#: ../../chapters/shortest_path.rst:288
msgid ""
"cost to traverse the path from ``id1`` to ``id2``. Cost will be -1.0 if "
"there is no path to that target vertex id."
msgstr ""

#: ../../chapters/shortest_path.rst:291
msgid "``pgr_kdijkstraPath`` returns set of ``pgr_costResult``:"
msgstr ""

#: ../../chapters/shortest_path.rst:294
msgid "path vertex target id (identifies the target path)."
msgstr ""

#: ../../chapters/shortest_path.rst:295
msgid "path edge id"
msgstr ""

#: ../../chapters/shortest_path.rst:296
msgid "cost to traverse this edge or -1.0 if there is no path to this target"
msgstr ""

#: ../../chapters/shortest_path.rst:300
msgid "Example query ``pgr_kdijkstraCost``"
msgstr ""

#: ../../chapters/shortest_path.rst:325
msgid "Example query ``pgr_kdijkstraPath``"
msgstr ""

#: ../../chapters/shortest_path.rst:355
msgid ""
"There are many other functions available with the new pgRouting 2.0 release,"
" but most of them work in a similar way, and it would take too much time to "
"mention them all in this workshop. For the complete list of pgRouting "
"functions see the API documentation: http://docs.pgrouting.org/"
msgstr ""
