# 
msgid ""
msgstr ""
"Project-Id-Version: Workshop - FOSS4G routing with pgRouting 2013\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-10-07 10:18\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../chapters/topology.rst:13
msgid "Create a Network Topology"
msgstr ""

#: ../../chapters/topology.rst:15
msgid ""
":doc:`osm2pgrouting <osm2pgrouting>` is a convenient tool, but it's also a "
"*black box*. There are several cases where :doc:`osm2pgrouting "
"<osm2pgrouting>` can't be used. Obviously if the data isn't OpenStreetMap "
"data. Some network data already comes with a network topology that can be "
"used with pgRouting out-of-the-box. Often network data is stored in Shape "
"file format (``.shp``) and we can use PostGIS' ``shape2postgresql`` "
"converter to import the data into a PostgreSQL database. But what to do "
"then?"
msgstr ""

#: ../../chapters/topology.rst:21
msgid ""
"In this chapter you will learn how to create a network topology from "
"scratch. For that we will start with data that contains the minimum "
"attributes needed for routing and show how to proceed step-by-step to build "
"routable data for pgRouting."
msgstr ""

#: ../../chapters/topology.rst:25
msgid "Load network data"
msgstr ""

#: ../../chapters/topology.rst:27
msgid ""
"At first we will load a database dump from the workshop ``data`` directory. "
"This directory contains a compressed file with database dumps as well as a "
"small size network data. If you haven't uncompressed the data yet, extract "
"the file by"
msgstr ""

#: ../../chapters/topology.rst:34
msgid ""
"The following command will import the database dump. It will add PostGIS and"
" pgRouting functions to a database, in the same way as decribed in the "
"previous chapter. It will also load the sample data with a minimum number of"
" attributes, which you will usually find in any network data:"
msgstr ""

#: ../../chapters/topology.rst:44
msgid "Let's see wich tables have been created:"
msgstr ""

#: ../../chapters/topology.rst:47
msgid "Run: ``psql -U postgres -d pgrouting-workshop -c \"\\d\"``"
msgstr ""

#: ../../chapters/topology.rst:62
msgid ""
"The table containing the road network data has the name ``ways``. It "
"consists of the following attributes:"
msgstr ""

#: ../../chapters/topology.rst:65
msgid "Run: ``psql -U postgres -d pgrouting-workshop -c \"\\d ways\"``"
msgstr ""

#: ../../chapters/topology.rst:82
msgid ""
"It is common that road network data provides at least the following "
"information:"
msgstr ""

#: ../../chapters/topology.rst:84
msgid "Road link ID (gid)"
msgstr ""

#: ../../chapters/topology.rst:85
msgid "Road class (class_id)"
msgstr ""

#: ../../chapters/topology.rst:86
msgid "Road link length (length)"
msgstr ""

#: ../../chapters/topology.rst:87
msgid "Road name (name)"
msgstr ""

#: ../../chapters/topology.rst:88
msgid "Road geometry (the_geom)"
msgstr ""

#: ../../chapters/topology.rst:90
msgid ""
"This allows to display the road network as a PostGIS layer in GIS software, "
"for example in QGIS. Though it is not sufficient for routing, because it "
"doesn't contain network topology information."
msgstr ""

#: ../../chapters/topology.rst:92
msgid "For the next steps we need to start the PostgreSQL command line tool"
msgstr ""

#: ../../chapters/topology.rst:98
msgid "... or use PgAdmin III."
msgstr ""

#: ../../chapters/topology.rst:102
msgid "Calculate topology"
msgstr ""

#: ../../chapters/topology.rst:104
msgid ""
"Having your data imported into a PostgreSQL database usually requires one "
"more step for pgRouting. You have to make sure that your data provides a "
"correct network topology, which consists of information about source and "
"target ID of each road link."
msgstr ""

#: ../../chapters/topology.rst:106
msgid ""
"If your network data doesn't have such network topology information already "
"you need to run the ``pgr_createTopology`` function. This function assigns a"
" ``source`` and a ``target`` ID to each link and it can \"snap\" nearby "
"vertices within a certain tolerance."
msgstr ""

#: ../../chapters/topology.rst:112
msgid ""
"First we have to add source and target column, then we run the "
"``pgr_createTopology`` function ... and wait. Depending on the network size "
"this process may take from minutes to hours. It will also require enough "
"memory (RAM or SWAP partition) to store temporary data."
msgstr ""

#: ../../chapters/topology.rst:125
msgid ""
"Execute ``psql -U postgres -d pgrouting-workshop`` in your terminal to "
"connect to the database and start the PostgreSQL shell. Leave the shell with"
" ``\\q`` command."
msgstr ""

#: ../../chapters/topology.rst:129
msgid ""
"The dimension of the tolerance parameter depends on your data projection. "
"Usually it's either \"degrees\" or \"meters\"."
msgstr ""

#: ../../chapters/topology.rst:133
msgid "Add indices"
msgstr ""

#: ../../chapters/topology.rst:135
msgid ""
"Fortunately we didn't need to wait too long because the data is small. But "
"your network data might be very large, so it's a good idea to add an index "
"to ``source`` and ``target`` column."
msgstr ""

#: ../../chapters/topology.rst:142
msgid "After these steps our routing database looks like this:"
msgstr ""

#: ../../chapters/topology.rst:145
msgid "Run: ``\\d``"
msgstr ""

#: ../../chapters/topology.rst:161
msgid ""
"``geography_columns`` should contain a record for each table with "
"\"geometry\" attribute and its SRID."
msgstr ""

#: ../../chapters/topology.rst:162
msgid "``vertices_tmp`` contains a list of all network nodes."
msgstr ""

#: ../../chapters/topology.rst:166
msgid "Run: ``\\d ways``"
msgstr ""

#: ../../chapters/topology.rst:186
msgid "``source`` and ``target`` columns are now updated with node IDs."
msgstr ""

#: ../../chapters/topology.rst:187
msgid "``name`` may contain the street name or be empty."
msgstr ""

#: ../../chapters/topology.rst:188
msgid "``length`` is the road link length in kilometers."
msgstr ""

#: ../../chapters/topology.rst:190
msgid ""
"Now we are ready for our first routing query with :doc:`Dijkstra algorithm "
"<shortest_path>`!"
msgstr ""
