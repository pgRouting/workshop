# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010-2013 Hal Seki, Yves Jacolin, Daniel Kastl, Frédéric Junod
# This file is distributed under the same license as the Workshop - FOSS4G routing with pgRouting package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Workshop - FOSS4G routing with pgRouting 2013\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-10-07 10:18\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../chapters/shortest_path.rst:13
# 04b7616e06d945f4989e67ae4073d537
msgid "pgRouting Algorithms"
msgstr ""

#: ../../chapters/shortest_path.rst:15
# 09ba6d34591f445c968e89a4f27242b6
msgid "pgRouting was first called *pgDijkstra*, because it implemented only shortest path search with *Dijkstra* algorithm. Later other functions were added and the library was renamed."
msgstr ""

#: ../../chapters/shortest_path.rst:21
# 7bca811142774c3ca4d9c045580b5b54
msgid "This chapter will explain selected pgRouting algorithms and which attributes are required."
msgstr ""

#: ../../chapters/shortest_path.rst:26
# 2436b71b38a0475885e25ba652889b96
msgid "If you run :doc:`osm2pgrouting <osm2pgrouting>` tool to import *OpenStreetMap* data, the ``ways`` table contains all attributes already to run all shortest path functions. The ``ways`` table of the ``pgrouting-workshop`` database of the :doc:`previous chapter <topology>` is missing several attributes instead, which are listed as **Prerequisites** in this chapter."
msgstr ""

#: ../../chapters/shortest_path.rst:32
# 9690da0236c04b9ca6b2049d3ba3061f
msgid "Shortest Path Dijkstra"
msgstr ""

#: ../../chapters/shortest_path.rst:34
# f10d997ecbbd4432893c65c30eb46a9b
msgid "Dijkstra algorithm was the first algorithm implemented in pgRouting. It doesn't require other attributes than ``source`` and ``target`` ID, ``id`` attribute and ``cost``. It can distinguish between `directed <http://en.wikipedia.org/wiki/Directed_graph>`_ and undirected graphs. You can specify if your network has ``reverse cost`` or not."
msgstr ""

#: ../../chapters/shortest_path.rst:37
#: ../../chapters/shortest_path.rst:131
#: ../../chapters/shortest_path.rst:242
# 0141db9d02ba46c78223a502264fc779
# 32e5c305e88e425fbbd7b4df905835cb
# 6842f9d45d984dc1972ed29e6681bcfb
msgid "Prerequisites"
msgstr ""

#: ../../chapters/shortest_path.rst:38
# a64c31b1a4ca4816bf44d1f6df9bb49e
msgid "To be able to use ``reverse cost`` you need to add an additional cost column. We can set reverse cost as length."
msgstr ""

#: ../../chapters/shortest_path.rst:46
#: ../../chapters/shortest_path.rst:157
#: ../../chapters/shortest_path.rst:247
# 77e4e32ce73344a69532820c99e69bbd
# 60fe574fe255467eb3bccf3e125be1f2
# 06e9868c095841a29665694c6aaaa9fb
msgid "Description"
msgstr ""

#: ../../chapters/shortest_path.rst:47
#: ../../chapters/shortest_path.rst:160
# 6e05a29138144b27a8fb79db75fc02b3
# 92d40d836a3b4903bcd607fc64058ca5
msgid "Returns a set of ``pgr_costResult`` (seq, id1, id2, cost) rows, that make up a path."
msgstr ""

#: ../../chapters/shortest_path.rst:55
#: ../../chapters/shortest_path.rst:168
#: ../../chapters/shortest_path.rst:263
# 5e12dddf41504573a438430466a2938e
# d0f6e365d248437fa3e4bc9d067fe73b
# 181bca74ec1e44f59b48acbf17e642cd
msgid "Parameters"
msgstr ""

#: ../../chapters/shortest_path.rst:56
#: ../../chapters/shortest_path.rst:169
#: ../../chapters/shortest_path.rst:264
# 920a8987619145b998c2a7ed8810e0a3
# a0dd301a38e44509bf4995db55000045
# 2177df0135f54005bf88e8610ec95ff0
msgid "a SQL query, which should return a set of rows with the following columns:"
msgstr ""

#: ../../chapters/shortest_path.rst:63
#: ../../chapters/shortest_path.rst:176
#: ../../chapters/shortest_path.rst:271
# 75c76271e6aa408a9000c29f5e2d95bc
# c449de92010c4bcfb206ab19496be2c2
# f07bd0af5e98435a92dbf0c98d02b9cb
msgid "``int4`` identifier of the edge"
msgstr ""

#: ../../chapters/shortest_path.rst:64
#: ../../chapters/shortest_path.rst:177
#: ../../chapters/shortest_path.rst:272
# ff9703a695dd4d5794f425f816ced012
# e03d8d8e6d02422c9222f6633c30fea8
# 266a89db527b44069282fad4547293c9
msgid "``int4`` identifier of the source vertex"
msgstr ""

#: ../../chapters/shortest_path.rst:65
#: ../../chapters/shortest_path.rst:178
#: ../../chapters/shortest_path.rst:273
# 08a700fd020148f19573b0d43a97a247
# 012f5d70513d43fbae167c0cceedddbb
# 73ceadb9f9d94704aa4acb1d51bd69e0
msgid "``int4`` identifier of the target vertex"
msgstr ""

#: ../../chapters/shortest_path.rst:66
#: ../../chapters/shortest_path.rst:179
#: ../../chapters/shortest_path.rst:274
# c9010fcda4d54137808bbad42ff7c425
# 65bd421067ff4f8686bec3e70d14390c
# bb3956a911d848c391a1a746ae9be0d5
msgid "``float8`` value, of the edge traversal cost. A negative cost will prevent the edge from being inserted in the graph."
msgstr ""

#: ../../chapters/shortest_path.rst:67
#: ../../chapters/shortest_path.rst:184
#: ../../chapters/shortest_path.rst:275
# 18ba967a50db4292bfdc8d66c7c8bebd
# 4b94523f15da4a8aba8e3e785e13659d
# a53ce1837c064cc6b429bdf08c2b70b6
msgid "(optional) the cost for the reverse traversal of the edge. This is only used when the ``directed`` and ``has_rcost`` parameters are ``true`` (see the above remark about negative costs)."
msgstr ""

#: ../../chapters/shortest_path.rst:69
#: ../../chapters/shortest_path.rst:186
#: ../../chapters/shortest_path.rst:277
# 875961eb81824ac29252da0cb023ef8d
# aa4e2267c3174bd8b86a0026e8c0c256
# 4956d6cbc4804072afac607c5dcdcb3a
msgid "``int4`` id of the start point"
msgstr ""

#: ../../chapters/shortest_path.rst:70
#: ../../chapters/shortest_path.rst:187
# 68b069e285cd43378a1568a2a264defd
# bf99f82bae3f488caefbb7fd39650d6b
msgid "``int4`` id of the end point"
msgstr ""

#: ../../chapters/shortest_path.rst:71
#: ../../chapters/shortest_path.rst:188
#: ../../chapters/shortest_path.rst:279
# 65ce736790be4fe384134e0de25f8bcb
# 0bf4e8a3ffbd450485c5203c090f0a9e
# c32cd7559be249f1aedb868f8bfbe688
msgid "``true`` if the graph is directed"
msgstr ""

#: ../../chapters/shortest_path.rst:72
#: ../../chapters/shortest_path.rst:189
#: ../../chapters/shortest_path.rst:280
# 04e321efd05549eca14e34a104948e91
# 2840a928dd984bc2b3094d0c95f12b4d
# cfe52ac0b61d4fecba526f4a392d4fb6
msgid "if ``true``, the ``reverse_cost`` column of the SQL generated set of rows will be used for the cost of the traversal of the edge in the opposite direction."
msgstr ""

#: ../../chapters/shortest_path.rst:74
#: ../../chapters/shortest_path.rst:191
# 74bf01fd523e43d8a4d8030bf797abb1
# 4be7ca4ba17341749b11d5270f6557bd
msgid "Returns set of ``pgr_costResult``:"
msgstr ""

#: ../../chapters/shortest_path.rst:76
#: ../../chapters/shortest_path.rst:193
#: ../../chapters/shortest_path.rst:285
#: ../../chapters/shortest_path.rst:293
# 9f3070022e9b46c58a8706029502d0fe
# 69f3e9b71dbd4455aeb8346c662e5e75
# f12c012bd97242648eb2f6d4d3335e56
# c96f11cf277b40feab7c221f09816be3
msgid "row sequence"
msgstr ""

#: ../../chapters/shortest_path.rst:77
#: ../../chapters/shortest_path.rst:194
# 5b13146980f842008ab939e6fb35dfcf
# 67e7b430eddf4c699945f98f4ec731f3
msgid "node ID"
msgstr ""

#: ../../chapters/shortest_path.rst:78
#: ../../chapters/shortest_path.rst:195
# eb52de4eaed84e4e8a759ef9a7a77fe3
# ef84a80821664338ac963e0add586850
msgid "edge ID (``-1`` for the last row)"
msgstr ""

#: ../../chapters/shortest_path.rst:79
#: ../../chapters/shortest_path.rst:196
# 5fa4473e1a564384bb89ad8965e0ba3a
# 1632bd82ac974647bf3c204da8eceb00
msgid "cost to traverse from ``id1`` using ``id2``"
msgstr ""

#: ../../chapters/shortest_path.rst:84
# 5d5edcc21d9c436d81e6bd1be70bea9f
msgid "Many pgRouting functions have ``sql::text`` as one of their arguments. While this may look confusing at first, it makes the functions very flexible as the user can pass any ``SELECT`` statement as function argument as long as the returned result contains the required number of attributes and the correct attribute names."
msgstr ""

#: ../../chapters/shortest_path.rst:85
# 63dd780d1267488ba340c8529052d00e
msgid "Dijkstra algorithm does not require the network geometry."
msgstr ""

#: ../../chapters/shortest_path.rst:86
# f803c58d8d294e3ba1213d134a5e34fc
msgid "The function does not return a geometry, but only an ordered list of nodes."
msgstr ""

#: ../../chapters/shortest_path.rst:89
#: ../../chapters/shortest_path.rst:200
# 52996775dad04496bfd12f101cbc4235
# 156fc0c716a44322b8d908c123c7f039
msgid "Example query"
msgstr ""

#: ../../chapters/shortest_path.rst:90
# e1e76145ec164512b61aa108f6052d22
msgid "``pgr_costResult`` is a common result type used by several pgRouting functions. In the case of ``pgr_dijkstra`` the first column is a sequential ID, followed by node ID, edge ID and cost to pass this edge."
msgstr ""

#: ../../chapters/shortest_path.rst:104
#: ../../chapters/shortest_path.rst:214
#: ../../chapters/shortest_path.rst:313
#: ../../chapters/shortest_path.rst:338
# cebdb00fdb064debaf699af8580f7a37
# 4b07fd71123a4d58b5f528379859d8b9
# e62991f4ad804b0f828afc053ba9e110
# eb817ea62184469f98830d4066a2c381
msgid "Query result"
msgstr ""

#: ../../chapters/shortest_path.rst:120
# 7e9691b6f17442768c7766b8d7058265
msgid "With more complex SQL statements, using JOINs for example, the result may be in a wrong order. In that case ``ORDER BY seq`` will ensure that the path is in the right order again."
msgstr ""

#: ../../chapters/shortest_path.rst:121
# dd25831f698f4bb5a01f63602601d10a
msgid "The returned cost attribute represents the cost specified in the ``sql::text`` argument. In this example cost is ``length`` in unit \"kilometers\". Cost may be time, distance or any combination of both or any other attributes or a custom formula."
msgstr ""

#: ../../chapters/shortest_path.rst:126
# 6b5f98b2ad0a4dabb642c3886505cf9d
msgid "Shortest Path A*"
msgstr ""

#: ../../chapters/shortest_path.rst:128
# 03639c22859e481dbee43c7d5f46e232
msgid "A-Star algorithm is another well-known routing algorithm. It adds geographical information to source and target of each network link. This enables the routing query to prefer links which are closer to the target of the shortest path search."
msgstr ""

#: ../../chapters/shortest_path.rst:132
# b4d4d7ab305d40a39781aa0a1bf9f8ea
msgid "For A-Star you need to prepare your network table and add latitute/longitude columns (``x1``, ``y1`` and ``x2``, ``y2``) and calculate their values."
msgstr ""

#: ../../chapters/shortest_path.rst:149
# 857a396abdb84e12bea14785aac5d541
msgid "A bug in a previous version of PostGIS didn't allow the use of ``ST_startpoint`` or ``ST_endpoint``."
msgstr ""

#: ../../chapters/shortest_path.rst:150
# 45a42c358f734402806e8db72b0d87af
msgid "From PostGIS 2.x ``ST_startpoint`` and ``ST_endpoint`` are only valid for ``LINESTRING`` geometry type and will fail with ``MULTILINESTING``."
msgstr ""

#: ../../chapters/shortest_path.rst:152
# 56f7fcdb32b84c10a01c961ba5b03e6a
msgid "Therefor a slightly more difficult looking query is used. If the network data really contains multi-geomtery linestrings the query might give the wrong start and end point. But in general data has been imported as ``MULTILINESTING`` even if it only contains ``LINESTRING`` geometries."
msgstr ""

#: ../../chapters/shortest_path.rst:158
# dc6e9cc43375429da397f91505c8068c
msgid "Shortest Path A-Star function is very similar to the Dijkstra function, though it prefers links that are close to the target of the search. The heuristics of this search are predefined, so you need to recompile pgRouting if you want to make changes to the heuristic function itself."
msgstr ""

#: ../../chapters/shortest_path.rst:180
# 9ee656be7d52464581c1f5881c0b3059
msgid "``x`` coordinate of the start point of the edge"
msgstr ""

#: ../../chapters/shortest_path.rst:181
# 4df3011e827443038ae0b4b281de5576
msgid "``y`` coordinate of the start point of the edge"
msgstr ""

#: ../../chapters/shortest_path.rst:182
# 43d5ad35f2af4cd2a228f3ec2915b15e
msgid "``x`` coordinate of the end point of the edge"
msgstr ""

#: ../../chapters/shortest_path.rst:183
# bd7c4c170e8a4a8db5dfe69f6cc1b8ba
msgid "``y`` coordinate of the end point of the edge"
msgstr ""

#: ../../chapters/shortest_path.rst:230
# ab96b65ce58c492aa33b3d1d66fa0aa3
msgid "The result of Dijkstra and A-Star are the same, which should be the case."
msgstr ""

#: ../../chapters/shortest_path.rst:231
# 3368357b91e9431eaf4ff535ba1de8f3
msgid "A-Star is supposed to be faster than Dijkstra algorithm as the network size is getting larger. But in case of pgRouting the algorithm speed advantage does not matter really compared the time required to select the network data and build the graph."
msgstr ""

#: ../../chapters/shortest_path.rst:237
# 6235f7fbf97a4d2d8286c8c3ba74ade9
msgid "Multiple Shortest Paths with kDijkstra"
msgstr ""

#: ../../chapters/shortest_path.rst:239
# 149136252d8c485d9ba20106c63b6161
msgid "The kDijkstra functions are very similar to the Dijkstra function but they allow to set multiple destinations with a single function call."
msgstr ""

#: ../../chapters/shortest_path.rst:243
# a82983a448e0439b9a6a32222d97cedf
msgid "kDijkstra doesn't require additional attributes to Dijkstra algorithm."
msgstr ""

#: ../../chapters/shortest_path.rst:248
# a190b399c9be4860801b2c8acc25e41a
msgid "If the main goal is to calculate the total cost, for example to calculate multiple routes for a distance matrix, then ``pgr_kdijkstraCost`` returns a more compact result. In case the paths are important ``pgr_kdijkstraPath`` function returns a result similar to A* or Dijkstra for each destination."
msgstr ""

#: ../../chapters/shortest_path.rst:251
# 377da8ba4d664e788d7b97aecbb2114f
msgid "Both functions return a set of ``pgr_costResult`` (seq, id1, id2, cost) rows, that summarize the path cost or return the paths."
msgstr ""

#: ../../chapters/shortest_path.rst:278
# 680d8eb03cc7456ab5c0472f110720b3
msgid "``int4[]`` an array of ids of the end points"
msgstr ""

#: ../../chapters/shortest_path.rst:283
# b032aa70e0a047b4a34881443ffa1029
msgid "``pgr_kdijkstraCost`` returns set of ``pgr_costResult``:"
msgstr ""

#: ../../chapters/shortest_path.rst:286
# 2230e3004017492c916efb065b7c4e9c
msgid "path vertex source id (this will always be source start point in the query)."
msgstr ""

#: ../../chapters/shortest_path.rst:287
# c3f8303fe2b2480f8fa589349d7e4ed8
msgid "path vertex target id"
msgstr ""

#: ../../chapters/shortest_path.rst:288
# 48e79e2176924fd0b85e07d1685ac865
msgid "cost to traverse the path from ``id1`` to ``id2``. Cost will be -1.0 if there is no path to that target vertex id."
msgstr ""

#: ../../chapters/shortest_path.rst:291
# 03671d1f80fe4ce18ce09b60a4d6b0b9
msgid "``pgr_kdijkstraPath`` returns set of ``pgr_costResult``:"
msgstr ""

#: ../../chapters/shortest_path.rst:294
# b2f1ebe13b1e4410bfc0ce1e059b464c
msgid "path vertex target id (identifies the target path)."
msgstr ""

#: ../../chapters/shortest_path.rst:295
# 92cdfbbc961040639d13c625e3b4ad98
msgid "path edge id"
msgstr ""

#: ../../chapters/shortest_path.rst:296
# 6ff33358813f40999458fefca3a13f62
msgid "cost to traverse this edge or -1.0 if there is no path to this target"
msgstr ""

#: ../../chapters/shortest_path.rst:300
# cadad606cd804e149a33a4c58a3dc79e
msgid "Example query ``pgr_kdijkstraCost``"
msgstr ""

#: ../../chapters/shortest_path.rst:325
# 7a8f797b4bba4566a137e99d258b1bda
msgid "Example query ``pgr_kdijkstraPath``"
msgstr ""

#: ../../chapters/shortest_path.rst:355
# 4dc7eda827db4cec9b39eeed4d563006
msgid "There are many other functions available with the new pgRouting 2.0 release, but most of them work in a similar way, and it would take too much time to mention them all in this workshop. For the complete list of pgRouting functions see the API documentation: http://docs.pgrouting.org/"
msgstr ""

